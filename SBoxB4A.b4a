Build1=Default,b4a.sim3d
File1=cow.obj
File2=pumpkin.obj
File3=teapot.obj
File4=teddybear.obj
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=Default Group
Library1=core
Library2=gesturedetector
Library3=javaobject
Library4=phone
Library5=rippledrawable
Library6=stringutils
Library7=threading
Library8=xui
Library9=json
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="35"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~SetApplicationAttribute(android:hardwareAccelerated, "true")
Module1=ButtonToggle
Module10=CustomButton
Module11=EditVec3Field
Module12=JoyStickView
Module13=Math3D
Module14=ModelBar
Module15=PopoverPanelView
Module16=SliderView
Module17=Starter
Module18=UI
Module2=cCamera
Module3=cLight
Module4=cMaterial
Module5=cMesh
Module6=cModel
Module7=ControlsPanel
Module8=cRenderer
Module9=cScene
NumberOfFiles=4
NumberOfLibraries=9
NumberOfModules=18
Version=13.4
@EndOfDesignText@
#Region  Project Attributes 
    #ApplicationLabel: SimpleRayTrace
    #VersionCode: 1
    #VersionName: 1.0
    #SupportedOrientations: portrait
    #CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
    #FullScreen: True
    #IncludeTitle: False
#End Region

Sub Process_Globals
	' ---------- types ----------

	Dim Timer As Timer

	Dim Renderer As cRenderer
	Dim Scene As cScene
	Dim Opt As RenderOptions
	
	Public ScenePresetLoaded As Boolean = False
	Public CurrentScenePresetName As String = ""
	Public RaytraceResolutionScale As Float = 0.1
	Public RaytraceVoidColor As Int = Colors.Black
	Public PathTraceSamples As Int = 2
	Public PathTraceBounces As Int = 3
	Public PathTraceVoidColor As Int = Colors.Black
	
End Sub

Sub Globals
	Dim pnl As Panel
	Dim cvs As Canvas
	Dim scrW As Int, scrH As Int
	
	Dim Controls As ControlsPanel
	
	Public remFrames As Int = 1
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
'	=========== UI ===========
 
	pnl.Initialize("")
	Activity.AddView(pnl, 0, 0, 100%x, 100%y)
	Controls.Initialize
	Activity.AddView(Controls.panelmain, 0, 0, 100%x, 100%y)
	Controls.build
	
'	========= SCENE ==========

	Scene.Initialize
	Scene.BuildPreset_CornellBox
	'
	' example: persist the generated scene preset and load it back from storage
'		============== Materials

	Controls.refreshObjectPopover
	If Controls.IsInitialized Then Controls.refreshPresetsPopover
	ScenePresetLoaded = False
	CurrentScenePresetName = ""
	
	Renderer.Initialize
	Opt.BackfaceCull = True : Opt.DrawFaces = True : Opt.DrawEdges = False : Opt.DrawVerts = False : Opt.SmoothShading = False
	Opt.UseMaterialColors = True
	Opt.FaceColor = Colors.RGB(60, 160, 255)
	Opt.EdgeColor = Colors.ARGB(220, 40, 40, 40)
	Opt.VertexColor = Colors.Yellow
	Opt.EdgeThickness = 2
	Opt.VertexSize = 3
	
	cvs.Initialize(pnl)
	
	Renderer.RayBackgroundColor = RaytraceVoidColor
	Renderer.PathBackgroundColor = PathTraceVoidColor
	
	
'	========= RENDER ==========

	Dim rendstats As RenderStats = Renderer.RenderRaster(cvs, pnl.Width, pnl.Height, Scene, Opt)
	Log(rendstats)
	pnl.Invalidate
	Timer.Initialize("timer", 16)
	Timer.Enabled = True
	
	scrW = pnl.Width : scrH = pnl.Height

'	Timer.Enabled = False
'	pnl.Visible = False
'	Controls.panelmain.Visible = False

	
End Sub

Sub timer_Tick
	
	'Deadzone to avoid drift
	Dim dead As Float = 0.08
	Dim x As Float = Controls.gJoyXMove
	Dim y As Float = Controls.gJoyYMove
	If Abs(x) < dead Then x = 0
	If Abs(y) < dead Then y = 0
	Dim maxStep As Float = .1
	Dim maxStep As Float = Scene.Camera.MoveSpeed
	Scene.Camera.Truck(x * maxStep)
	Scene.Camera.Dolly(-y * maxStep)
	
	Dim xLook As Float = Controls.gJoyXLook
	Dim yLook As Float = Controls.gJoyYLook
	If Abs(xLook) < dead Then xLook = 0
	If Abs(yLook) < dead Then yLook = 0
	Dim maxStepLook As Float = .05
	Dim maxStepLook As Float = Scene.Camera.TurnSpeed
	Scene.Camera.PanTilt(-xLook * maxStepLook, -yLook * maxStepLook)

'	RenderRaster

	If Renderer.RENDER_MODE = Renderer.MODE_RASTER Then
		Renderer.RenderRaster(cvs, pnl.Width, pnl.Height, Scene, Opt)
	else if Renderer.RENDER_MODE = Renderer.MODE_RAYTRACE And Not(Renderer.testTimer.Enabled) Then
		renderRaytraced
	Else If Renderer.RENDER_MODE = Renderer.MODE_PATHTRACE Then
		' Path trace renders are triggered manually via resetTimer / UI
		' Path trace is still too slow
	End If
	pnl.Invalidate
	
	
	remFrames = remFrames - 1
	If remFrames <= 0 Then 
		Timer.Enabled = False
		Return 
	End If

End Sub

Public Sub resetTimer
	remFrames = 10
	If Renderer.RENDER_MODE = Renderer.MODE_PATHTRACE Then
		Timer.Enabled = False
		CallSubDelayed(Me, "pathtrace")
	Else
		Timer.Enabled = True
	End If
End Sub

public Sub renderRaytraced
	Timer.Enabled = False
	
	Dim scale As Float = Max(0.1, Min(1, RaytraceResolutionScale))
	Dim renderW As Int = Max(1, Ceil(pnl.Width * scale))
	Dim renderH As Int = Max(1, Ceil(pnl.Height * scale))
	Renderer.RayBackgroundColor = RaytraceVoidColor
	Dim raytrace As ResumableSub = Renderer.RenderRaytrace(Scene, renderW, renderH)
	Wait For (raytrace) Complete (bmp As Bitmap)
	Dim rect As Rect : rect.Initialize(0, 0, 100%x, 100%y)
	cvs.DrawBitmap(bmp, Null, rect)
	pnl.Invalidate
	
End Sub

public Sub DrawThisBitmap(bmp As Bitmap)
	Dim rect As Rect : rect.Initialize(0, 0, 100%x, 100%y)
	cvs.DrawBitmap(bmp, Null, rect)
	pnl.Invalidate
End Sub

Public Sub pathtrace
	Timer.Enabled = False
	Log("START == PathTrace")
	Dim samples As Int = Max(1, PathTraceSamples)
	Dim bounces As Int = Max(1, PathTraceBounces)
	Renderer.PathBackgroundColor = PathTraceVoidColor
	Dim bmp As Bitmap = Renderer.RenderPathTrace(Scene, pnl.Width, pnl.Height, samples, bounces)
	cvs.DrawColor(Colors.Black)
	Dim dst As Rect : dst.Initialize(0, 0, pnl.Width, pnl.Height)
	cvs.DrawBitmap(bmp, Null, dst)
	pnl.Invalidate
	Log("END == PathTrace")
End Sub


Public Sub CreateScenePreset
	Scene.CreateEmptyPreset
	Controls.refreshObjectPopover
	ScenePresetLoaded = False
	CurrentScenePresetName = ""
	If Controls.IsInitialized Then Controls.refreshPresetsPopover
	resetTimer
End Sub

Public Sub SaveScenePreset(presetName As String) As String
	Dim clean As String = presetName.Trim
	If clean.Length = 0 Then
		If ScenePresetLoaded And CurrentScenePresetName.Length > 0 Then
			clean = CurrentScenePresetName
		Else
			clean = GenerateUniquePresetName("scene")
		End If
	End If
	Dim fileName As String = clean & ".json"
	Dim json As String = Scene.SavePresetToFile(File.DirInternal, fileName)
	Log($"Scene preset saved to ${fileName}"$)
	ScenePresetLoaded = True
	CurrentScenePresetName = clean
	If Controls.IsInitialized Then Controls.refreshPresetsPopover
	Return json
End Sub

Public Sub LoadScenePreset(presetName As String)
	Dim clean As String = presetName.Trim
	If clean.Length = 0 Then Return
	Dim fileName As String = clean & ".json"
	If File.Exists(File.DirInternal, fileName) = False Then
		Log($"Preset file not found: ${fileName}"$)
		Return
	End If
	Scene.LoadPresetFromFile(File.DirInternal, fileName)
	Controls.refreshObjectPopover
	ScenePresetLoaded = True
	CurrentScenePresetName = clean
	If Controls.IsInitialized Then Controls.refreshPresetsPopover
	resetTimer
End Sub


Public Sub DeleteScenePreset(presetName As String)
	Dim clean As String = presetName.Trim
	If clean.Length = 0 Then Return
	Dim fileName As String = clean & ".json"
	If File.Exists(File.DirInternal, fileName) = False Then Return
	File.Delete(File.DirInternal, fileName)
	If ScenePresetLoaded And clean.ToLowerCase = CurrentScenePresetName.ToLowerCase Then
		ScenePresetLoaded = False
		CurrentScenePresetName = ""
	End If
	If Controls.IsInitialized Then Controls.refreshPresetsPopover
End Sub

Public Sub ListScenePresets As List
	Dim result As List
	result.Initialize
	Dim files As List = File.ListFiles(File.DirInternal)
	If files.IsInitialized = False Then Return result
	For Each fileName As String In files
		If fileName.ToLowerCase.EndsWith(".json") Then
			result.Add(fileName.SubString2(0, fileName.Length - 5))
		End If
	Next
	Return result
End Sub

Private Sub GenerateUniquePresetName(base As String) As String
	Dim cleanBase As String = base.Trim
	If cleanBase.Length = 0 Then 
		cleanBase = "scene"
	End If
	Dim existing As List = ListScenePresets
	Dim existingLower As List
	existingLower.Initialize
	For Each name As String In existing
		existingLower.Add(name.ToLowerCase)
	Next
	If existingLower.IndexOf(cleanBase.ToLowerCase) = -1 Then 
		Return cleanBase
	End If
	Dim suffix As Int = 1
	Do While suffix > 0
		Dim candidate As String = $"${cleanBase}-${suffix}"$
		If existingLower.IndexOf(candidate.ToLowerCase) = -1 Then 
			Return candidate
		End If
		suffix = suffix + 1
	Loop
	Return ""
End Sub